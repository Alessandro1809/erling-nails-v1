---
import Layout from '@/layouts/Layout.astro';
import { Image } from 'astro:assets';
import { ImageModal } from './ImageModal';
import Contact from './Contact.astro';
import { fetchGalleryImages } from '@/utils/gallery.utils';

// Get images using the new API endpoint
const { data: images = [], error } = await fetchGalleryImages(Astro.url);

// Check if there's an image in the URL to open the modal
const urlParams = new URL(Astro.request.url).searchParams;
const sharedImageUrl = urlParams.get('image');

console.log('Received images:', images);
console.log('Error if exists:', error);
---

<Layout>
{images.length === 0 && (
  <div class="text-gray-500 text-center my-8 p-4 bg-gray-50 rounded-lg">
    <p class="font-semibold">No images available</p>
    <p class="text-sm mt-2">Make sure you have images in the "Nails" folder on Cloudinary.</p>
  </div>
)}

<section aria-label="Image gallery" class="relative mt-32 z-0 mb-20 md:mt-52">
  <header>
    <h2 class="font-special text-5xl md:text-7xl mb-10">
      Complete gallery of 
      <span class="bg-gradient-to-r from-theme-red to-[#7a00b3] bg-clip-text text-transparent">designs</span>
    </h2>
  </header>

  <section 
    class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-10" 
    aria-label="Complete nail designs gallery"
    id="gallery-grid"
  >
    {images.map((image, index) => (
      <figure 
        class="relative h-96 overflow-hidden rounded-md transform transition-all duration-500 hover:scale-[1.02] hover:shadow-xl cursor-pointer bg-gray-100 opacity-0 translate-y-4" 
        data-image={image.url}
        data-alt={image.alt}
        data-index={index}
      >
        <div class="absolute inset-0 bg-gray-200 animate-pulse transition-opacity duration-500"></div>
        <Image
          src={image.url.replace('/upload/', '/upload/w_800,c_scale/')}
          alt={image.alt.replace('Nails/', '')}
          width={800}
          height={600}
          class="absolute inset-0 h-full w-full object-cover opacity-0 transition-all duration-500"
          loading="eager"
        />
        <figcaption class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-4 translate-y-full transition-transform duration-300 group-hover:translate-y-0">
          <span class="text-white font-special text-lg">{image.alt.split('/').pop()}</span>
        </figcaption>
      </figure>
    ))}
  </section>
</section>

<a 
  href="/" 
  class="fixed bottom-8 right-8 button-red shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 z-50 flex items-center gap-2"
  aria-label="Back to home"
>
  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
    <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
  </svg>
  Back
</a>

<ImageModal client:load />

<Contact/>
</Layout>

<script>
  import { 
    updateUrlWithImage, 
    animateImageEntry, 
    createIntersectionObserver, 
    handleSharedImage 
  } from '@/utils/gallery.utils';

  console.log('Script started');

  // Function to open the modal
  function openModal(imageUrl: string, alt: string) {
    updateUrlWithImage(imageUrl);
    const event = new CustomEvent('openModal', { 
      detail: { imageUrl, alt }
    });
    window.dispatchEvent(event);
  }

  // Listen for modal close event
  window.addEventListener('closeModal', () => {
    updateUrlWithImage(null);
  });

  // Also listen for clicks outside the modal
  window.addEventListener('click', (e) => {
    const modalBackdrop = document.querySelector('.fixed.inset-0.z-50');
    if (modalBackdrop && e.target === modalBackdrop) {
      updateUrlWithImage(null);
    }
  });

  // Set up image animations and loading
  document.querySelectorAll('figure').forEach((figure, index) => {
    const img = figure.querySelector('img');
    if (!img) return;

    // When the image loads
    img.addEventListener('load', () => {
      setTimeout(() => {
        animateImageEntry(figure as HTMLElement);
      }, index * 100);
    });

    // Add click event to open modal
    figure.addEventListener('click', () => {
      const imageUrl = figure.getAttribute('data-image');
      const alt = figure.getAttribute('data-alt');
      if (imageUrl && alt) {
        console.log('Click on image:', imageUrl);
        openModal(imageUrl, alt);
      }
    });
  });

  // Observer for progressive appearance
  const observer = createIntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const figure = entry.target;
        const img = figure.querySelector('img');
        if (img && img.complete) {
          animateImageEntry(figure as HTMLElement);
        }
        observer.unobserve(figure);
      }
    });
  });

  // Observe all figures
  document.querySelectorAll('figure').forEach(figure => {
    observer.observe(figure);
  });

  // Make sure ImageModal component is ready
  window.addEventListener('load', () => {
    console.log('Window fully loaded');
    const urlParams = new URLSearchParams(window.location.search);
    const sharedImageUrl = urlParams.get('image');
    handleSharedImage(sharedImageUrl, openModal);
  });

  // Also try when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM Content Loaded');
    const urlParams = new URLSearchParams(window.location.search);
    const sharedImageUrl = urlParams.get('image');
    handleSharedImage(sharedImageUrl, openModal);
  });
</script>

<style>
  figure {
    will-change: transform, opacity;
  }

  .gallery-section figure:hover img {
    transform: scale(1.05);
  }

  .gallery-section figure:hover figcaption {
    transform: translateY(0);
  }

  img {
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    will-change: opacity, transform;
  }

  figcaption {
    transition: transform 0.3s ease;
  }

  .animate-pulse {
    transition: opacity 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  @media (min-width: 768px) {
    .gallery-section figure:nth-child(3n+1) {
      grid-column: span 1;
    }
    
    .gallery-section figure:nth-child(3n+2) {
      grid-column: span 1;
    }
    
    .gallery-section figure:nth-child(3n) {
      grid-column: span 1;
    }
  }
</style>

